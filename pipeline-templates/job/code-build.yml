parameters:
  SolutionBaseName:
  BuildConfiguration:

jobs:
- job: CodeBuild
  dependsOn: DacpacBuild
  pool:
    name: DAS - Continuous Integration Agents
    workspace:
      clean: all
  variables:
  - group: BUILD Management Resources
  steps:

  - bash: |
      sudo npm install -g azurite
      sudo mkdir azurite
      sudo azurite --silent --location azurite --debug azurite\debug.log &
    displayName: 'Install and Run Azurite'

  # - task: VSBuild@1
  #   displayName: Build DACPAC
  #   inputs:
  #     solution: src/Database/SFA.DAS.Funding.ApprenticeshipEarnings.Database.sqlproj
  #     platform: any cpu
  #     configuration: release
  #     msbuildArgs: /p:PackageLocation="$(build.artifactstagingdirectory)/publish"

  # - task: CmdLine@2
  #   displayName: 'Install MsSqlLocalDb'
  #   inputs:
  #     script: 'choco install sqllocaldb -y && refreshenv && sqllocaldb start mssqllocaldb'
  #     failOnStderr: true

  - template: azure-pipelines-templates/build/step/gitversion.yml@das-platform-building-blocks

  - task: CopyFiles@2
    displayName: Copy Dac For Acceptance Tests
    inputs:
      contents: |
        $(Pipeline.Workspace)/DacpacArtifact/src/Database/bin/Output/**
      targetFolder: src/Database/bin/release

  - template: azure-pipelines-templates/build/step/app-build.yml@das-platform-building-blocks
    parameters:
      RunAcceptanceTests: true
      ContinueOnVulnerablePackageScanError: true # TEMP - DO NOT APPROVE PR WITH THIS IN PLACE

  - task: DotNetCoreCLI@2
    displayName: Publish - dotnet publish Inner Api
    inputs:
      command: publish
      publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects
      projects: src/InnerApi/${{ parameters.SolutionBaseName }}.InnerApi.csproj
      arguments: -o $(build.artifactstagingdirectory)/publish -c ${{ parameters.BuildConfiguration }} --no-build
      modifyOutputPath: true
      zipAfterPublish: true

  - task: DotNetCoreCLI@2
    displayName: Publish - dotnet publish Durable Entities
    inputs:
      command: publish
      publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects
      projects: src/DurableEntities/${{ parameters.SolutionBaseName }}.DurableEntities.csproj
      arguments: -o $(build.artifactstagingdirectory)/publish -c ${{ parameters.BuildConfiguration }} --no-build
      modifyOutputPath: true
      zipAfterPublish: true

  - task: DownloadBuildArtifacts@1
    displayName: Copy Files to $(build.artifactstagingdirectory)/publish
    inputs:
      buildType: 'current' # 'current' | 'specific'. Required. Download artifacts produced by. Default: current.
      #project: # string. Required when buildType == specific. Project. 
      #pipeline: # string. Alias: definition. Required when buildType == specific. Build pipeline. 
      #specificBuildWithTriggering: false # boolean. Optional. Use when buildType == specific. When appropriate, download artifacts from the triggering build. Default: false.
      #buildVersionToDownload: 'latest' # 'latest' | 'latestFromBranch' | 'specific'. Required when buildType == specific. Build version to download. Default: latest.
      #allowPartiallySucceededBuilds: false # boolean. Optional. Use when buildType == specific && buildVersionToDownload != specific. Download artifacts even from partially succeeded builds. Default: false.
      #branchName: 'refs/heads/master' # string. Required when buildType == specific && buildVersionToDownload == latestFromBranch. Branch name. Default: refs/heads/master.
      #buildId: # string. Required when buildType == specific && buildVersionToDownload == specific. Build. 
      #tags: # string. Optional. Use when buildType == specific && buildVersionToDownload != specific. Build Tags. 
      downloadType: 'specific' # 'single' | 'specific'. Required. Download type. Default: single.
      artifactName: # string. Required when downloadType == single. Artifact name. 
      itemPattern: '**.dacpac' # string. Matching pattern. Default: **.
      downloadPath: '$(build.artifactstagingdirectory)/publish'


  - task: PublishPipelineArtifact@1
    displayName: Publish Build Artifact
    inputs:
      targetPath: $(build.artifactstagingdirectory)/publish
      artifactName: ${{ parameters.SolutionBaseName }}
  
  - template: azure-pipelines-templates/build/step/nuget-pack.yml@das-platform-building-blocks
    parameters:
      DotNetStandardPackagesToPack: |
        src/Types/${{ parameters.SolutionBaseName }}.Types.csproj;